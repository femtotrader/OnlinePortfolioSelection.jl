function p‚Çú‚Çä‚ÇÅŒ∑‚±ºfunc(Œ≤‚Çú‚Çä‚ÇÅ::AbstractFloat, G‚ÇúŒ∑‚±º::AbstractVector)
  numer = Œ≤‚Çú‚Çä‚ÇÅ.^G‚ÇúŒ∑‚±º
  return numer./sum(numer)
end

@inline G‚ÇúŒ∑‚±ºfunc(G‚Çú‚Çã‚ÇÅ::AbstractVector, b‚Çú::AbstractMatrix, x‚Çú::AbstractVector) =
  [G‚Çú‚Çã‚ÇÅ[Œ∑‚±º]+sum(log.(b‚Çú[:, Œ∑‚±º].*x‚Çú)) for Œ∑‚±º=axes(b‚Çú, 2)]

function b‚Çú‚Çä‚ÇÅŒ∑‚±ºfunc!(b‚Çú::AbstractMatrix, Œ∑::AbstractVector, x‚Çú::AbstractVector)
  m, k   = axes(b‚Çú)
  ùêõ‚ÇúŒ∑‚±ºx‚Çú = [sum(b‚Çú[:, Œ∑‚±º].*x‚Çú) for Œ∑‚±º=k]
  x‚ÇúŒ∑‚±º   = x‚Çú*transpose(Œ∑)
  for Œ∑‚±º ‚àà k
    for i ‚àà m
      b‚Çú[i, Œ∑‚±º] = b‚Çú[i, Œ∑‚±º]*exp(x‚ÇúŒ∑‚±º[i, Œ∑‚±º]/ùêõ‚ÇúŒ∑‚±ºx‚Çú[Œ∑‚±º])
    end
    b‚Çú[:, Œ∑‚±º] = b‚Çú[:, Œ∑‚±º]./sum(b‚Çú[:, Œ∑‚±º])
  end
  return b‚Çú
end

@inline b‚Çú‚Çä‚ÇÅfunc(b‚Çú‚Çä‚ÇÅ::AbstractMatrix, p‚Çú‚Çä‚ÇÅ::AbstractVector) =
  sum([p‚Çú‚Çä‚ÇÅ[Œ∑‚±º]*b‚Çú‚Çä‚ÇÅ[:, Œ∑‚±º] for Œ∑‚±º=axes(b‚Çú‚Çä‚ÇÅ, 2)])

"""
    waeg(x::AbstractMatrix, Œ∑‚Çò·µ¢‚Çô::AbstractFloat, Œ∑‚Çò‚Çê‚Çì::AbstractFloat, k::Integer)

Run Weak Aggregating Exponential Gradient (WAEG) algorithm.

# Arguments
- `x::AbstractMatrix`: matrix of relative prices.
- `Œ∑‚Çò·µ¢‚Çô::AbstractFloat`: minimum learning rate.
- `Œ∑‚Çò‚Çê‚Çì::AbstractFloat`: maximum learning rate.
- `k::Integer`: number of EG experts.

# Returns
- `::OPSAlgorithm`: An [`OPSAlgorithm`](@ref) object.

# Example
```julia
julia> using OnlinePortfolioSelection

julia> rel_pr = rand(4, 8);

julia> m = waeg(rel_pr, 0.01, 0.2, 20);

julia> m.b
4√ó8 Matrix{Float64}:
 0.25  0.238126  0.24158   0.2619    0.261729  0.27466   0.25148   0.256611
 0.25  0.261957  0.259588  0.248465  0.228691  0.24469   0.256674  0.246801
 0.25  0.245549  0.247592  0.254579  0.27397   0.259982  0.272341  0.290651
 0.25  0.254368  0.25124   0.235057  0.23561   0.220668  0.219505  0.205937

julia> sum(m.b, dims=1) .|> isapprox(1.) |> all
true
```

# References
> [Boosting Exponential Gradient Strategy for Online Portfolio Selection: An Aggregating Experts‚Äô Advice Method](https://doi.org/10.1007/s10614-019-09890-2)
"""
function waeg(x::AbstractMatrix, Œ∑‚Çò·µ¢‚Çô::AbstractFloat, Œ∑‚Çò‚Çê‚Çì::AbstractFloat, k::Integer)
  Œ∑‚Çò‚Çê‚Çì>Œ∑‚Çò·µ¢‚Çô || ArgumentError("`Œ∑‚Çò‚Çê‚Çì` must be greater than Œ∑‚Çò·µ¢‚Çô.") |> throw
  1>Œ∑‚Çò‚Çê‚Çì>0. || ArgumentError("`Œ∑‚Çò‚Çê‚Çì` must be in the range (0, 1).") |> throw
  1>Œ∑‚Çò·µ¢‚Çô>0. || ArgumentError("`Œ∑‚Çò·µ¢‚Çô` must be in the range (0, 1).") |> throw
  k>1       || ArgumentError("`k` must be greater than 1.") |> throw
  n_assets, n_periods = size(x)
  œµ = (Œ∑‚Çò‚Çê‚Çì - Œ∑‚Çò·µ¢‚Çô)/(k-1)
  Œ∑ = [Œ∑‚Çò·µ¢‚Çô + (i-1)*œµ for i=1:k]
  bŒ∑ = (eg(x, eta=val).b for val=Œ∑)
  b = similar(x)
  b[:, 1] .= 1/n_assets
  GŒ∑ = zeros(k)
  for t ‚àà 1:n_periods-1
    b‚ÇúŒ∑  = stack(b[:, t] for b in bŒ∑, dims=2)
    GŒ∑  .= G‚ÇúŒ∑‚±ºfunc(GŒ∑, b‚ÇúŒ∑, x[:, t])
    Œ≤‚Çú‚Çä‚ÇÅ = exp(1/‚àöt)
    p‚Çú‚Çä‚ÇÅ = p‚Çú‚Çä‚ÇÅŒ∑‚±ºfunc(Œ≤‚Çú‚Çä‚ÇÅ, GŒ∑)
    b‚Çú‚Çä‚ÇÅŒ∑‚±ºfunc!(b‚ÇúŒ∑, Œ∑, x[:, t])
    b[:, t+1] = b‚Çú‚Çä‚ÇÅfunc(b‚ÇúŒ∑, p‚Çú‚Çä‚ÇÅ)
  end
  return OPSAlgorithm(n_assets, b, "WAEG")
end
