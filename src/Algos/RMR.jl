function TÃÉfunc(p::AbstractMatrix, Œº::AbstractVector)
  firstterm  = sum(1/norm(x.-Œº) for x=eachcol(p) if x!=Œº).^-1
  secondterm = sum(x/norm(x.-Œº) for x=eachcol(p) if x!=Œº) |> vec
  return firstterm*secondterm
end

function ùëáfunc(Œº::AbstractVector, p::AbstractMatrix)
  Œ∑ = any(map(x->x==Œº, eachcol(p)))
  RÃÉ = sum((x.-Œº)/norm(x.-Œº) for x=eachcol(p) if x!=Œº) |> vec
  Œ≥ = norm(RÃÉ)
  TÃÉ = TÃÉfunc(p, Œº)
  return max(0., 1-Œ∑/Œ≥)*TÃÉ.+min(1., Œ∑/Œ≥)*Œº
end

function xÃÇ‚Çú‚Çä‚ÇÅfunc(::RMRVariant, p::AbstractMatrix, m::Integer, œÑ)
  n_assets = size(p, 1)
  ùúá        = similar(p, n_assets, m)
  ùúá[:, 1]  = median(p, dims=2)
  ùúá·µ¢       = similar(p, n_assets)
  for i ‚àà 2:m
    ùúá[:, i] = ùúá·µ¢ = ùëáfunc(ùúá[:, i-1], p)
    norm(ùúá[:, i-1].-ùúá[:, i], 1)‚â§œÑ*norm(ùúá[:, i], 1) && break
  end
  pÃÇ‚Çú‚Çä‚ÇÅ = ùúá·µ¢
  return pÃÇ‚Çú‚Çä‚ÇÅ./p[:, end]
end

function updtportf(œµ, xÃÇ‚Çú‚Çä‚ÇÅ::AbstractVector, b‚Çú::AbstractVector)
  xÃÑ‚Çú‚Çä‚ÇÅ = mean(xÃÇ‚Çú‚Çä‚ÇÅ)
  Œ±‚Çú‚Çä‚ÇÅ = min(0., (sum(xÃÇ‚Çú‚Çä‚ÇÅ.*b‚Çú)-œµ)/norm(xÃÇ‚Çú‚Çä‚ÇÅ.-xÃÑ‚Çú‚Çä‚ÇÅ)^2)
  b‚Çú‚Çä‚ÇÅ = b‚Çú .- Œ±‚Çú‚Çä‚ÇÅ*(xÃÇ‚Çú‚Çä‚ÇÅ.-xÃÑ‚Çú‚Çä‚ÇÅ) |> normptf
  return b‚Çú‚Çä‚ÇÅ
end

"""
    rmr(p::AbstractMatrix, horizon::Integer, w::Integer, œµ, m, œÑ)

Run Robust Median Reversion (RMR) algorithm.

# Arguments
- `p::AbstractMatrix`: Prices matrix.
- `horizon::Integer`: Number of periods to run the algorithm.
- `w::Integer`: Window size.
- `œµ`: Reversion threshold.
- `m`: Maxmimum number of iterations.
- `œÑ`: Toleration level.

# Returns
- `OPSAlgorithm`: An [`OPSAlgorithm`](@ref) object.

# Example
```julia
julia> using OnlinePortfolioSelection, YFinance

julia> tickers = ["GOOG", "AAPL", "MSFT", "AMZN"];

julia> querry = [get_prices(ticker, startdt="2020-01-01", enddt="2020-01-31")["adjclose"] for ticker=tickers];

julia> prices = stack(querry, dims=1);

julia> horizon = 5

julia> window = 5

julia> œµ = 5

julia> m = 7

julia> œÑ = 1e6

julia> model = rmr(prices, horizon, window, œµ, m, œÑ);

julia> model.b
4√ó5 Matrix{Float64}:
 0.25  1.0         1.0       1.0         1.0
 0.25  0.0         0.0       0.0         0.0
 0.25  0.0         0.0       0.0         0.0
 0.25  1.14513e-8  9.979e-9  9.99353e-9  1.03254e-8
```

# Reference
> [Robust Median Reversion Strategy for Online Portfolio Selection](https://www.doi.org/10.1109/TKDE.2016.2563433)
"""
function rmr(p::AbstractMatrix, horizon::Integer, w::Integer, œµ, m, œÑ)
  horizon>0 || ArgumentError("`horizon` should be positive. Got $horizon.") |> throw
  w>0 || ArgumentError("`w` should be positive. Got $w.") |> throw
  œµ>0 || ArgumentError("`œµ` should be positive. Got $œµ.") |> throw
  m>0 || ArgumentError("`m` should be positive. Got $m.") |> throw
  œÑ>0 || ArgumentError("`œÑ` should be positive. Got $œÑ.") |> throw
  n_assets, n_samples = size(p)
  n_samples‚â•horizon+w-1 || ArgumentError("Not enough samples. Got $n_samples, need at least \
  $(horizon+w-1).") |> throw

  b        = similar(p, n_assets, horizon)
  b[:, 1] .= 1/n_assets
  for t ‚àà 1:horizon-1
    xÃÇ‚Çú‚Çä‚ÇÅ      = xÃÇ‚Çú‚Çä‚ÇÅfunc(RMR(), p[:, end-horizon-w+t+1:end-horizon+t], m, œÑ)
    b[:, t+1] = updtportf(œµ, xÃÇ‚Çú‚Çä‚ÇÅ, b[:, t])
  end
  any(b.<0.) && b |> positify! |> normalizer!
  return OPSAlgorithm(n_assets, b, "RMR")
end
